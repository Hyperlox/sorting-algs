import java.util.*;
import java.lang.*;
import java.io.*;

public class SortingAlgs
{
    private static void swap(int[] data, int index1, int index2)
    {
        int temp = data[index1];
        data[index1] = data[index2];
        data[index2] = temp;
    }

    //bubble sort
    public static void bubbleSort(int[] data)
    {
        int position, scan;
        for (position = data.length - 1; position >= 0; position--)
        {
            for (scan = 0; scan <= position - 1; scan++)
            {
                if (data[scan] > data[scan+1])
                    swap(data, scan, scan + 1);
            }
        }
    }  

    //quick sort
    public static void quickSort(int[] data)
    {
        quickSort(data, 0, data.length - 1);
    }
    
    private static void quickSort(int[] data, int min, int max)
    {
        if (min < max)
        {
            int indexOfPartition = partition(data, min, max); //creates partitions 
            quickSort(data, min, indexOfPartition-1); //sort the left partition 
            quickSort(data, indexOfPartition + 1, max); //sort the right partition 
        }
    }
    
    private static int partition(int[] data, int min, int max)
    {
        int partitionElement;
        int left, right;
        int middle = (min + max)/2;
        partitionElement = data[middle]; //middle data value is partition
        swap(data, middle, min); //moves partition out of the way
        left = min;
        right = max;
        while (left < right)
        {
            //searches for an element that is greater than partition 
            while (left < right && data[left] <= partitionElement)
                left++;
            //searches for an element that is less than partition
            while (data[right] > partitionElement)
                right--;
            //swaps the elements
            if (left < right)
                swap(data, left, right);
        }
        swap(data, min, right); //moves the partition element back to place
        return right;
    }  

    //merge sort 
    public static void mergeSort(int[] data)
    {
        mergeSort(data, 0, data.length-1);
    }
    
    private static void mergeSort(int[] data, int min, int max)
    {
        if (min < max) //stops the recursion when there is only one value in the array
        {
            int mid = (min + max) / 2;
            //splits the array into two 
            mergeSort(data, min, mid);
            mergeSort(data, mid + 1, max);
            merge(data, min, mid, max);
        }
    }

    private static void merge(int[] data, int first, int mid, int last)
    {
        int[] temp = new int[data.length]; //creates a temporary array to put items in
        int first1 = first, last1 = mid; //endpoints of first subarray
        int first2 = mid+1, last2 = last; //endpoints of second subarray
        int index = first1; //index while putting values in the temporary array
        //Copies smaller item of the two arrays into the temporary array until one of the subarrays is used up
        while (first1 <= last1 && first2 <= last2)
        {
            if (data[first1] < data[first2])
            {
                temp[index] = data[first1];
                first1++;
            }
            else
            {
                temp[index] = data[first2];
                first2++;
            }
            index++;
        }
        //copies remaining elements from first subarray, if any
        while (first1 <= last1)
        {
            temp[index] = data[first1];
            first1++;
            index++;
        }
        while (first2 <= last2)
        {
            temp[index] = data[first2];
            first2++;
            index++;
        }
        //copies merged data into original array
        for (index = first; index <= last; index++)
            data[index] = temp[index];
    }

    //driver method
    public static void main(String args[])
    {
        long start = System.nanoTime();
        int[] array = new int[]{
            35, 91, 80, 73, 80, 100, 42, 83, 2, 39, 30, 26, 22, 82, 51, 53, 97, 35, 81, 94, 98, 84, 100, 5, 98, 37, 100, 79, 51, 81, 8, 9, 74, 86, 43, 67, 19, 87, 33, 61, 12, 29, 75, 61, 9, 68, 63, 84, 39, 22, 91, 73, 99, 20, 84, 79, 5, 89, 100, 71, 48, 48, 63, 0, 20, 79, 41, 14, 48, 39, 14, 43, 8, 3, 12, 55, 12, 69, 33, 29, 48, 86, 24, 65, 25, 77, 98, 32, 90, 84, 4, 22, 56, 59, 20, 74, 95, 81, 5, 51, 12, 86, 22, 8, 84, 93, 37, 77, 23, 54, 22, 98, 92, 25, 69, 95, 66, 15, 70, 47, 74, 40, 77, 88, 33, 13, 73, 2, 54, 85, 74, 28, 31, 36, 41, 63, 94, 93, 98, 60, 21, 70, 78, 24, 90, 41, 49, 61, 22, 54, 14, 53, 72, 51, 36, 49, 23, 13, 54, 92, 17, 73, 76, 0, 20, 87, 32, 9, 99, 67, 35, 62, 16, 25, 59, 90, 55, 73, 46, 7, 56, 100, 1, 44, 51, 32, 68, 38, 76, 15, 33, 10, 85, 29, 9, 39, 94, 100, 3, 69, 46, 6, 12, 11, 84, 68, 87, 15, 18, 28, 96, 93, 7, 69, 5, 57, 27, 23, 95, 4, 76, 92, 78, 35, 37, 5, 100, 41, 53, 69, 25, 95, 23, 49, 33, 64, 98, 85, 47, 68, 40, 93, 59, 19, 18, 49, 87, 31, 71, 66, 2, 9, 8, 74, 26, 26, 65, 45, 92, 28, 93, 91, 0, 35, 16, 13, 82, 39, 16, 13, 3, 4, 27, 92, 81, 56, 15, 29, 10, 84, 24, 71, 79, 66, 34, 63, 34, 68, 36, 55, 17, 25, 36, 66, 69, 29, 28, 59, 39, 0, 1, 65, 2, 53, 7, 31, 91, 36, 24, 66, 45, 50, 82, 95, 98, 53, 47, 20, 13, 50, 39, 82, 44, 69, 46, 98, 81, 20, 10, 44, 96, 80, 2, 96, 27, 63, 95, 7, 41, 84, 58, 35, 33, 95, 22, 97, 31, 86, 95, 2, 80, 82, 33, 75, 33, 32, 84, 91, 40, 93, 46, 54, 67, 85, 39, 99, 56, 87, 7, 48, 77, 7, 57, 83, 77, 0, 4, 90, 92, 29, 6, 5, 79, 12, 69, 49, 27, 94, 64, 10, 22, 44, 66, 87, 46, 90, 67, 28, 27, 27, 28, 86, 4, 92, 55, 73, 56, 84, 57, 67, 51, 22, 85, 51, 22, 48, 96, 57, 19, 84, 31, 49, 20, 81, 77, 38, 98, 22, 47, 70, 53, 20, 48, 19, 78, 99, 66, 82, 35, 99, 2, 49, 84, 22, 82, 88, 91, 52, 10, 12, 53, 20, 90, 53, 56, 71, 71, 43, 33, 80, 33, 41, 80, 89, 48, 8, 50, 83, 60, 65, 18, 11, 40, 90, 92, 55, 32, 0, 96, 31, 92, 6, 34, 20, 35, 89, 15, 75, 82, 86, 70, 61, 38, 39, 94, 68, 21, 65, 39, 1, 68, 75, 79, 85, 36, 72, 83, 82, 65, 27, 30, 19, 89, 91, 100, 
            57, 99, 74, 58, 31, 83, 46, 73, 6, 96, 1, 29, 88, 11, 20, 47, 78, 9, 67, 91, 82, 46, 88, 83, 53, 82, 58, 46, 36, 40, 25, 47, 13, 90, 72, 88, 58, 81, 52, 89, 3, 24, 89, 52, 82, 89, 87, 49, 13, 3, 77, 41, 34, 20, 9, 46, 4, 23, 87, 55, 9, 76, 61, 85, 35, 1, 63, 50, 51, 20, 47, 83, 16, 23, 49, 92, 41, 27, 33, 66, 44, 83, 14, 33, 32, 78, 58, 56, 47, 46, 5, 23, 76, 68, 43, 58, 24, 72, 24, 17, 25, 7, 57, 47, 83, 45, 20, 60, 44, 35, 64, 7, 75, 9, 5, 1, 41, 70, 74, 12, 77, 35, 46, 64, 3, 25, 16, 10, 25, 68, 57, 30, 51, 73, 98, 49, 43, 52, 53, 50, 2, 60, 44, 59, 76, 38, 64, 87, 17, 10, 80, 49, 92, 73, 86, 58, 53, 27, 48, 26, 70, 26, 44, 36, 46, 3, 31, 73, 24, 1, 20, 75, 0, 5, 7, 39, 77, 83, 25, 85, 84, 33, 2, 12, 98, 75, 98, 2, 66, 19, 42, 34, 76, 85, 8, 31, 32, 100, 34, 48, 61, 68, 18, 21, 82, 27, 47, 84, 23, 90, 75, 12, 29, 19, 46, 94, 16, 9, 50, 31, 3, 20, 2, 97, 39, 78, 66, 11, 9, 89, 62, 56, 11, 100, 18, 36, 13, 52, 16, 71, 69, 46, 37, 40, 35, 94, 0, 76, 28, 88, 73, 57, 29, 67, 54, 5, 1, 23, 27, 82, 42, 28, 90, 75, 52, 47, 14, 2, 51, 12, 3, 93, 13, 74, 37, 56, 15, 17, 64, 47, 64, 69, 53, 82, 73, 74, 6, 97, 2, 34, 30, 59, 9, 5, 34, 80, 24, 81, 90, 52, 89, 71, 40, 17, 31, 16, 65, 90, 11, 16, 25, 89, 52, 31, 41, 48, 62, 22, 38, 84, 16, 66, 53, 38, 87, 89, 10, 15, 37, 53, 49, 14, 63, 7, 44, 71, 79, 47, 93, 4, 20, 55, 25, 11, 48, 19, 29, 43, 75, 51, 27, 73, 69, 18, 19, 77, 94, 27, 64, 17, 20, 53, 97, 70, 16, 95, 93, 75, 83, 38, 10, 7, 87, 61, 0, 59, 33, 45, 36, 39, 100, 52, 19, 33, 55, 90, 50, 99, 56, 79, 28, 48, 49, 86, 37, 94, 79, 54, 48, 76, 67, 88, 55, 23, 4, 60, 62, 97, 70, 53, 82, 17, 3, 18, 45, 39, 40, 91, 47, 10, 40, 31, 66, 14, 21, 14, 27, 3, 60, 42, 57, 70, 0, 93, 60, 28, 86, 7, 2, 64, 13, 8, 82, 7, 68, 45, 62, 14, 45, 66, 8, 63, 65, 54, 23, 48, 30, 80, 61, 20, 25, 25, 56, 19, 48, 24, 38, 69, 5, 44, 99, 6, 10, 11, 29, 41, 24, 64, 27, 62, 46, 62, 100, 71, 82};
        bubbleSort(array);
        long end = System.nanoTime();
		long elapsedTime = (end - start);
        System.out.println("Elapsed time for bubble sort: " + elapsedTime);
        
        long start2 = System.nanoTime();
        int[] array2 = new int[]{35, 91, 80, 73, 80, 100, 42, 83, 2, 39, 30, 26, 22, 82, 51, 53, 97, 35, 81, 94, 98, 84, 100, 5, 98, 37, 100, 79, 51, 81, 8, 9, 74, 86, 43, 67, 19, 87, 33, 61, 12, 29, 75, 61, 9, 68, 63, 84, 39, 22, 91, 73, 99, 20, 84, 79, 5, 89, 100, 71, 48, 48, 63, 0, 20, 79, 41, 14, 48, 39, 14, 43, 8, 3, 12, 55, 12, 69, 33, 29, 48, 86, 24, 65, 25, 77, 98, 32, 90, 84, 4, 22, 56, 59, 20, 74, 95, 81, 5, 51, 12, 86, 22, 8, 84, 93, 37, 77, 23, 54, 22, 98, 92, 25, 69, 95, 66, 15, 70, 47, 74, 40, 77, 88, 33, 13, 73, 2, 54, 85, 74, 28, 31, 36, 41, 63, 94, 93, 98, 60, 21, 70, 78, 24, 90, 41, 49, 61, 22, 54, 14, 53, 72, 51, 36, 49, 23, 13, 54, 92, 17, 73, 76, 0, 20, 87, 32, 9, 99, 67, 35, 62, 16, 25, 59, 90, 55, 73, 46, 7, 56, 100, 1, 44, 51, 32, 68, 38, 76, 15, 33, 10, 85, 29, 9, 39, 94, 100, 3, 69, 46, 6, 12, 11, 84, 68, 87, 15, 18, 28, 96, 93, 7, 69, 5, 57, 27, 23, 95, 4, 76, 92, 78, 35, 37, 5, 100, 41, 53, 69, 25, 95, 23, 49, 33, 64, 98, 85, 47, 68, 40, 93, 59, 19, 18, 49, 87, 31, 71, 66, 2, 9, 8, 74, 26, 26, 65, 45, 92, 28, 93, 91, 0, 35, 16, 13, 82, 39, 16, 13, 3, 4, 27, 92, 81, 56, 15, 29, 10, 84, 24, 71, 79, 66, 34, 63, 34, 68, 36, 55, 17, 25, 36, 66, 69, 29, 28, 59, 39, 0, 1, 65, 2, 53, 7, 31, 91, 36, 24, 66, 45, 50, 82, 95, 98, 53, 47, 20, 13, 50, 39, 82, 44, 69, 46, 98, 81, 20, 10, 44, 96, 80, 2, 96, 27, 63, 95, 7, 41, 84, 58, 35, 33, 95, 22, 97, 31, 86, 95, 2, 80, 82, 33, 75, 33, 32, 84, 91, 40, 93, 46, 54, 67, 85, 39, 99, 56, 87, 7, 48, 77, 7, 57, 83, 77, 0, 4, 90, 92, 29, 6, 5, 79, 12, 69, 49, 27, 94, 64, 10, 22, 44, 66, 87, 46, 90, 67, 28, 27, 27, 28, 86, 4, 92, 55, 73, 56, 84, 57, 67, 51, 22, 85, 51, 22, 48, 96, 57, 19, 84, 31, 49, 20, 81, 77, 38, 98, 22, 47, 70, 53, 20, 48, 19, 78, 99, 66, 82, 35, 99, 2, 49, 84, 22, 82, 88, 91, 52, 10, 12, 53, 20, 90, 53, 56, 71, 71, 43, 33, 80, 33, 41, 80, 89, 48, 8, 50, 83, 60, 65, 18, 11, 40, 90, 92, 55, 32, 0, 96, 31, 92, 6, 34, 20, 35, 89, 15, 75, 82, 86, 70, 61, 38, 39, 94, 68, 21, 65, 39, 1, 68, 75, 79, 85, 36, 72, 83, 82, 65, 27, 30, 19, 89, 91, 100, 
        57, 99, 74, 58, 31, 83, 46, 73, 6, 96, 1, 29, 88, 11, 20, 47, 78, 9, 67, 91, 82, 46, 88, 83, 53, 82, 58, 46, 36, 40, 25, 47, 13, 90, 72, 88, 58, 81, 52, 89, 3, 24, 89, 52, 82, 89, 87, 49, 13, 3, 77, 41, 34, 20, 9, 46, 4, 23, 87, 55, 9, 76, 61, 85, 35, 1, 63, 50, 51, 20, 47, 83, 16, 23, 49, 92, 41, 27, 33, 66, 44, 83, 14, 33, 32, 78, 58, 56, 47, 46, 5, 23, 76, 68, 43, 58, 24, 72, 24, 17, 25, 7, 57, 47, 83, 45, 20, 60, 44, 35, 64, 7, 75, 9, 5, 1, 41, 70, 74, 12, 77, 35, 46, 64, 3, 25, 16, 10, 25, 68, 57, 30, 51, 73, 98, 49, 43, 52, 53, 50, 2, 60, 44, 59, 76, 38, 64, 87, 17, 10, 80, 49, 92, 73, 86, 58, 53, 27, 48, 26, 70, 26, 44, 36, 46, 3, 31, 73, 24, 1, 20, 75, 0, 5, 7, 39, 77, 83, 25, 85, 84, 33, 2, 12, 98, 75, 98, 2, 66, 19, 42, 34, 76, 85, 8, 31, 32, 100, 34, 48, 61, 68, 18, 21, 82, 27, 47, 84, 23, 90, 75, 12, 29, 19, 46, 94, 16, 9, 50, 31, 3, 20, 2, 97, 39, 78, 66, 11, 9, 89, 62, 56, 11, 100, 18, 36, 13, 52, 16, 71, 69, 46, 37, 40, 35, 94, 0, 76, 28, 88, 73, 57, 29, 67, 54, 5, 1, 23, 27, 82, 42, 28, 90, 75, 52, 47, 14, 2, 51, 12, 3, 93, 13, 74, 37, 56, 15, 17, 64, 47, 64, 69, 53, 82, 73, 74, 6, 97, 2, 34, 30, 59, 9, 5, 34, 80, 24, 81, 90, 52, 89, 71, 40, 17, 31, 16, 65, 90, 11, 16, 25, 89, 52, 31, 41, 48, 62, 22, 38, 84, 16, 66, 53, 38, 87, 89, 10, 15, 37, 53, 49, 14, 63, 7, 44, 71, 79, 47, 93, 4, 20, 55, 25, 11, 48, 19, 29, 43, 75, 51, 27, 73, 69, 18, 19, 77, 94, 27, 64, 17, 20, 53, 97, 70, 16, 95, 93, 75, 83, 38, 10, 7, 87, 61, 0, 59, 33, 45, 36, 39, 100, 52, 19, 33, 55, 90, 50, 99, 56, 79, 28, 48, 49, 86, 37, 94, 79, 54, 48, 76, 67, 88, 55, 23, 4, 60, 62, 97, 70, 53, 82, 17, 3, 18, 45, 39, 40, 91, 47, 10, 40, 31, 66, 14, 21, 14, 27, 3, 60, 42, 57, 70, 0, 93, 60, 28, 86, 7, 2, 64, 13, 8, 82, 7, 68, 45, 62, 14, 45, 66, 8, 63, 65, 54, 23, 48, 30, 80, 61, 20, 25, 25, 56, 19, 48, 24, 38, 69, 5, 44, 99, 6, 10, 11, 29, 41, 24, 64, 27, 62, 46, 62, 100, 71, 82};
                quickSort(array2);
        long end2 = System.nanoTime();
        long elapsedTime2 = end2-start2;
        System.out.println("Elapsed time for quick sort: " + elapsedTime2);

        long start3 = System.nanoTime();
        int[] array3 = new int[]{35, 91, 80, 73, 80, 100, 42, 83, 2, 39, 30, 26, 22, 82, 51, 53, 97, 35, 81, 94, 98, 84, 100, 5, 98, 37, 100, 79, 51, 81, 8, 9, 74, 86, 43, 67, 19, 87, 33, 61, 12, 29, 75, 61, 9, 68, 63, 84, 39, 22, 91, 73, 99, 20, 84, 79, 5, 89, 100, 71, 48, 48, 63, 0, 20, 79, 41, 14, 48, 39, 14, 43, 8, 3, 12, 55, 12, 69, 33, 29, 48, 86, 24, 65, 25, 77, 98, 32, 90, 84, 4, 22, 56, 59, 20, 74, 95, 81, 5, 51, 12, 86, 22, 8, 84, 93, 37, 77, 23, 54, 22, 98, 92, 25, 69, 95, 66, 15, 70, 47, 74, 40, 77, 88, 33, 13, 73, 2, 54, 85, 74, 28, 31, 36, 41, 63, 94, 93, 98, 60, 21, 70, 78, 24, 90, 41, 49, 61, 22, 54, 14, 53, 72, 51, 36, 49, 23, 13, 54, 92, 17, 73, 76, 0, 20, 87, 32, 9, 99, 67, 35, 62, 16, 25, 59, 90, 55, 73, 46, 7, 56, 100, 1, 44, 51, 32, 68, 38, 76, 15, 33, 10, 85, 29, 9, 39, 94, 100, 3, 69, 46, 6, 12, 11, 84, 68, 87, 15, 18, 28, 96, 93, 7, 69, 5, 57, 27, 23, 95, 4, 76, 92, 78, 35, 37, 5, 100, 41, 53, 69, 25, 95, 23, 49, 33, 64, 98, 85, 47, 68, 40, 93, 59, 19, 18, 49, 87, 31, 71, 66, 2, 9, 8, 74, 26, 26, 65, 45, 92, 28, 93, 91, 0, 35, 16, 13, 82, 39, 16, 13, 3, 4, 27, 92, 81, 56, 15, 29, 10, 84, 24, 71, 79, 66, 34, 63, 34, 68, 36, 55, 17, 25, 36, 66, 69, 29, 28, 59, 39, 0, 1, 65, 2, 53, 7, 31, 91, 36, 24, 66, 45, 50, 82, 95, 98, 53, 47, 20, 13, 50, 39, 82, 44, 69, 46, 98, 81, 20, 10, 44, 96, 80, 2, 96, 27, 63, 95, 7, 41, 84, 58, 35, 33, 95, 22, 97, 31, 86, 95, 2, 80, 82, 33, 75, 33, 32, 84, 91, 40, 93, 46, 54, 67, 85, 39, 99, 56, 87, 7, 48, 77, 7, 57, 83, 77, 0, 4, 90, 92, 29, 6, 5, 79, 12, 69, 49, 27, 94, 64, 10, 22, 44, 66, 87, 46, 90, 67, 28, 27, 27, 28, 86, 4, 92, 55, 73, 56, 84, 57, 67, 51, 22, 85, 51, 22, 48, 96, 57, 19, 84, 31, 49, 20, 81, 77, 38, 98, 22, 47, 70, 53, 20, 48, 19, 78, 99, 66, 82, 35, 99, 2, 49, 84, 22, 82, 88, 91, 52, 10, 12, 53, 20, 90, 53, 56, 71, 71, 43, 33, 80, 33, 41, 80, 89, 48, 8, 50, 83, 60, 65, 18, 11, 40, 90, 92, 55, 32, 0, 96, 31, 92, 6, 34, 20, 35, 89, 15, 75, 82, 86, 70, 61, 38, 39, 94, 68, 21, 65, 39, 1, 68, 75, 79, 85, 36, 72, 83, 82, 65, 27, 30, 19, 89, 91, 100, 
        57, 99, 74, 58, 31, 83, 46, 73, 6, 96, 1, 29, 88, 11, 20, 47, 78, 9, 67, 91, 82, 46, 88, 83, 53, 82, 58, 46, 36, 40, 25, 47, 13, 90, 72, 88, 58, 81, 52, 89, 3, 24, 89, 52, 82, 89, 87, 49, 13, 3, 77, 41, 34, 20, 9, 46, 4, 23, 87, 55, 9, 76, 61, 85, 35, 1, 63, 50, 51, 20, 47, 83, 16, 23, 49, 92, 41, 27, 33, 66, 44, 83, 14, 33, 32, 78, 58, 56, 47, 46, 5, 23, 76, 68, 43, 58, 24, 72, 24, 17, 25, 7, 57, 47, 83, 45, 20, 60, 44, 35, 64, 7, 75, 9, 5, 1, 41, 70, 74, 12, 77, 35, 46, 64, 3, 25, 16, 10, 25, 68, 57, 30, 51, 73, 98, 49, 43, 52, 53, 50, 2, 60, 44, 59, 76, 38, 64, 87, 17, 10, 80, 49, 92, 73, 86, 58, 53, 27, 48, 26, 70, 26, 44, 36, 46, 3, 31, 73, 24, 1, 20, 75, 0, 5, 7, 39, 77, 83, 25, 85, 84, 33, 2, 12, 98, 75, 98, 2, 66, 19, 42, 34, 76, 85, 8, 31, 32, 100, 34, 48, 61, 68, 18, 21, 82, 27, 47, 84, 23, 90, 75, 12, 29, 19, 46, 94, 16, 9, 50, 31, 3, 20, 2, 97, 39, 78, 66, 11, 9, 89, 62, 56, 11, 100, 18, 36, 13, 52, 16, 71, 69, 46, 37, 40, 35, 94, 0, 76, 28, 88, 73, 57, 29, 67, 54, 5, 1, 23, 27, 82, 42, 28, 90, 75, 52, 47, 14, 2, 51, 12, 3, 93, 13, 74, 37, 56, 15, 17, 64, 47, 64, 69, 53, 82, 73, 74, 6, 97, 2, 34, 30, 59, 9, 5, 34, 80, 24, 81, 90, 52, 89, 71, 40, 17, 31, 16, 65, 90, 11, 16, 25, 89, 52, 31, 41, 48, 62, 22, 38, 84, 16, 66, 53, 38, 87, 89, 10, 15, 37, 53, 49, 14, 63, 7, 44, 71, 79, 47, 93, 4, 20, 55, 25, 11, 48, 19, 29, 43, 75, 51, 27, 73, 69, 18, 19, 77, 94, 27, 64, 17, 20, 53, 97, 70, 16, 95, 93, 75, 83, 38, 10, 7, 87, 61, 0, 59, 33, 45, 36, 39, 100, 52, 19, 33, 55, 90, 50, 99, 56, 79, 28, 48, 49, 86, 37, 94, 79, 54, 48, 76, 67, 88, 55, 23, 4, 60, 62, 97, 70, 53, 82, 17, 3, 18, 45, 39, 40, 91, 47, 10, 40, 31, 66, 14, 21, 14, 27, 3, 60, 42, 57, 70, 0, 93, 60, 28, 86, 7, 2, 64, 13, 8, 82, 7, 68, 45, 62, 14, 45, 66, 8, 63, 65, 54, 23, 48, 30, 80, 61, 20, 25, 25, 56, 19, 48, 24, 38, 69, 5, 44, 99, 6, 10, 11, 29, 41, 24, 64, 27, 62, 46, 62, 100, 71, 82};
                mergeSort(array3);
        long end3 = System.nanoTime();
        long elapsedTime3 = end3 - start3;
        System.out.println("Elapsed time for merge sort: " + elapsedTime3);
    }
}
